# Generated by Django 3.2 on 2021-04-19 21:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TelegramUser",
            fields=[
                ("chat_id", models.IntegerField(primary_key=True, serialize=False)),
                ("user_name", models.CharField(blank=True, max_length=255)),
                ("full_name", models.CharField(blank=True, max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "curator_user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="telegram_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Telegram bot user",
                "verbose_name_plural": "Telegram bot users",
            },
        ),
        migrations.CreateModel(
            name="FatsecretUser",
            fields=[
                ("user_id", models.IntegerField(primary_key=True, serialize=False)),
                ("session_token", models.CharField(blank=True, max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "curator_user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fatsecret_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Fatsecret user",
                "verbose_name_plural": "Fatsecret users",
            },
        ),
        migrations.AddIndex(
            model_name="telegramuser",
            index=models.Index(
                fields=["user_name"], name="users_teleg_user_na_f7684a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="telegramuser",
            index=models.Index(
                fields=["full_name"], name="users_teleg_full_na_5983bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="telegramuser",
            index=models.Index(
                fields=["created_at"], name="users_teleg_created_192dfc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="telegramuser",
            index=models.Index(
                fields=["updated_at"], name="users_teleg_updated_8aae2b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fatsecretuser",
            index=models.Index(
                fields=["user_id"], name="users_fatse_user_id_4d1ff1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fatsecretuser",
            index=models.Index(
                fields=["session_token"], name="users_fatse_session_b12cdc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fatsecretuser",
            index=models.Index(
                fields=["created_at"], name="users_fatse_created_3815a4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fatsecretuser",
            index=models.Index(
                fields=["updated_at"], name="users_fatse_updated_2d7402_idx"
            ),
        ),
    ]
